#!/usr/bin/env bash

################################################################################
#
# t0d0
# ====
#
# Self-hosted todo script.
#
# Notice:
#   1. Copy `_t0d0' to `t0d0' before using this script, `_t0d0' is prototype,
#      and `t0d0' is for creating private data.
#   2. Don't manually edit this script. Please create issues.
#
# @author AnqurVanillapy
# @date 22 October 2016
# @version 0.2.0
################################################################################

if [[ -e "t0d0" ]]; then
    todopath="./t0d0"       # assume: in the repo
else
    todopath=$(which t0d0)  # assume: already in $PATH or alias
fi

# Todo items counting based on two variables:
# `initloc': init lines of code
# `loc': total lines of code
# so todos_count = loc - initloc
initloc=171
loc=$(wc -l < $todopath)
todos_count=$((loc - initloc))

GREEN="\033[0;32m"
GREEN_E="\\\033\[0;32m"
LBLUE="\033[1;34m"
RED="\033[0;31m"
NC="\033[0m"
NC_E="\\\033\[0m"

function show_header () {
    echo "t0d0: Self-hosted todo script"
    echo
}

function show_usage () {
    echo "Usage:"
    echo "  t0d0"
    echo "  t0d0 {-h|--help}"
    echo "  t0d0 COMMAND"
    echo
    echo "Commands:"
    echo "  add         Add a new todo item"
    echo "  done        Mark an item as completed"
    echo "  undo        Oops, something's not done yet"
    echo "  kill        Delete an item"
    echo "  clean       Kill the todo list"
    echo
    echo "Warning: Using alphabetic characters, numerical digits and common"
    echo "punctuation marks in the todo items is safer. Signs like '#', '['"
    echo "added to new todo items may cause some printing flaws, or even fatal"
    echo "errors."
}

function show_todo () {
    if [[ $todos_count -eq 0 ]]; then
        echo "t0d0: Nothing to do"
    else
        echo -e -n "${LBLUE}T0D0${NC} / "
        stat -c %y $todopath
        unfinished=$(tail -n $todos_count $todopath | grep -c "\[ \]")
        echo -e "Unfinished items: [${RED}$unfinished${NC}]"
        echo
        plain=$(tail -n $todos_count $todopath)
        for i in `seq $todos_count`; do
            plain=$(echo "$plain" | sed "${i}s=# =${i}. =")
        done
        pretty=$(echo "$plain" | sed "s=\[x\]=[${GREEN_E}x${NC_E}]=")
        echo -e "$pretty"
    fi
}

function delete_todo () {
    for i in `seq $1`; do
        sed -i '$d' $todopath
    done
}

case "$#" in
    "0")
        show_todo
        ;;
    "1")
        case "$1" in
            "-h" | "--help")
                show_header
                show_usage
                ;;
            "add")
                echo -n "new item: "
                read new_item
                echo -e "[${GREEN}t0d0${NC}] New item added! Off we go!"
                echo
                ((todos_count += 1))
                echo "# [ ] $new_item" >> $todopath
                show_todo
                ;;
            "done" | "undo" | "kill")
                show_todo
                echo
                echo -n "which number [base 1]: "
                read item_no
                if [[ $((item_no)) != $item_no ]]; then
                    echo "t0d0: Non-number characters are invalid"
                    exit 1
                else
                    lines_to_del=$(($todos_count - $item_no + 1))
                    lines_to_buf=$lines_to_del
                    _echo="echo"
                    if [ $((lines_to_del)) -le $todos_count ] \
                        && [ $((lines_to_del)) -ge 1 ]; then
                        case "$1" in
                            "done")
                                rexpr="1s=\[ \]=\[x\]="
                                update_msg="[${GREEN}done${NC}] Nailed it!"
                                ;;
                            "undo")
                                rexpr="1s=\[x\]=\[ \]="
                                update_msg="[${RED}undo${NC}] Keep it up!"
                                ;;
                            "kill")
                                lines_to_buf=$(($todos_count - $item_no))
                                if [[ $lines_to_buf -lt 1 ]]; then
                                    _echo="echo -n"
                                fi
                                rexpr=""
                                update_msg="[${GREEN}kill${NC}] Hasta la Vista!"
                                ((todos_count -= 1))
                                ;;
                        esac
                        buffer=$(tail -n $lines_to_buf $todopath)
                        delete_todo $lines_to_del
                        $_echo "$buffer" | sed "$rexpr" >> $todopath
                        echo -e "$update_msg"
                        echo
                        show_todo
                    else
                        echo "t0d0: Invalid item number"
                        exit 1
                    fi
                fi
                ;;
            "clean")
                delete_todo $todos_count
                todos_count=0
                show_todo
                ;;
            *)
                echo "t0d0: Invalid command: $1"
                echo
                show_usage
                exit 1
                ;;
        esac
        ;;
    *)
        show_header
        show_usage
        exit 1
        ;;
esac
