#!/usr/bin/env python3

"""\
mkslide
=======
"""

import sys, codecs
from os.path import splitext
from markdown import markdown
from pygments.formatters import HtmlFormatter


if len(sys.argv) != 2:
    print('Usage: mkslide filename')
    sys.exit(1)

fname = sys.argv[1]
title = splitext(fname)[0]
ofile = '{}.html'.format(title)
hilite = HtmlFormatter().get_style_defs('.codehilite')

style = """\
/* No background color of .codehilite */
.codehilite { background: transparent; }

* {
  box-sizing: border-box;
}

html, body, section {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

section {
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

a {
  color: cornflowerblue;
  text-decoration: none;
}

img { max-width: 95%; }

h1, h2, h3, h4, h5, h6, p, ul > li {
  width: 100%;
  font-weight: 400;
  font-family: Consolas, monospace;
}

h1, h2, h3, h4, h5, h6, p {
  font-size: 8em;
  text-align: center;
}

ul > li { font-size: 5em; }

h1 {
  font-weight: bold;
  font-size: 10em;
}
  h1::before {
    color: #999;
    font-weight: 400;
    content: "./";
  }

blockquote p { font-style: italic; }
  blockquote p::before,
  blockquote p::after {
    content: "\\"";
    color: #999;
  }

code {
  font-family: Courier, monospace;
}
  code::before,
  code::after {
    color: #999;
    content: "`";
  }

pre {
  font-size: 3em;
}

table {
  font-family: Consolas, monospace;
  font-size: 3em;
  text-align: center;
}
  th, td { padding: .2em; }

/* Exports PDF. */
@media print {
  @page { size: A4 landscape; }

  section {
    display: flex !important;
    page-break-after: always !important;
  }
    section:last-of-type {
      page-break-after: avoid !important;
    }
}
"""

script = """\
class Presentation {
  constructor () {
    this.slides = document.querySelectorAll('section')
    this._id = 0

    // Key and mouse events.
    document.addEventListener('click', _ => { ++this.activeId })

    window.addEventListener('keydown', e => {
      let key = e.which ? e.which : e.keyCode
      switch (key) {
        case 13:  // enter
        case 32:  // space
        case 39:  // right
        case 40:  // down
          e.preventDefault()
          ++this.activeId
          break
        case 8:   // backspace
        case 37:  // left
        case 38:  // up
          e.preventDefault()
          --this.activeId
          break
      }
    })
  }

  get activeId () { return this._id }
  set activeId (val) {
    if (val !== this.activeId) {
      this._id = val
      this.present()
    }
  }

  present () {
    if (this.activeId < 0) ++this.activeId
    else if (this.activeId >= this.slides.length) --this.activeId
    else {
      this.slides.forEach(s => { s.style.display = 'none' })
      this.slides[this.activeId].style.display = 'flex'
    }
  }
}

let pre = new Presentation()
pre.present() // init first slide
"""

template = """\
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="initial-scale=1">
  <title>{title}</title>
  <style>{hilite}</style>
  <style>{style}</style>
</head>
<body>
{content}
<script>{script}</script>
</body>
</html>
"""

md_exts = list(map(lambda x: 'markdown.extensions.{}'.format(x),
                   ['fenced_code', 'tables', 'codehilite']))

with codecs.open(fname, 'r', encoding='utf-8') as f:
    content = markdown(f.read(), extensions=md_exts)

content = '\n'.join(['<section>{}</section>'.format(sec) \
                     for sec in content.split('<hr />')])

with codecs.open(ofile, 'w', encoding='utf-8', errors='xmlcharrefreplace') as f:
    f.write(template.format(title=title,
                            hilite=hilite,
                            style=style,
                            script=script,
                            content=content))
