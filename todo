#!/usr/bin/env bash

################################################################################
#
# todo
# ====
#
# Self-hosted todo script
#
# Warning: Don't manually edit this script. Please create issues.
#
# @author AnqurVanillapy
# @date 21 October 2016
# @version 0.1.0
################################################################################

# TODO counting based on two variables:
# `initloc': no todos
# `loc': with todos
# so todos_count = loc - initloc
initloc=142
loc=$(wc -l < todo)
todos_count=$(($loc - $initloc))

GREEN="\033[0;32m"
GREEN_E="\\\033\[0;32m"
LBLUE="\033[1;34m"
RED="\033[0;31m"
NC="\033[0m"
NC_E="\\\033\[0m"

function show_header () {
    echo "todo: Self-hosted todo script"
    echo
}

function show_usage () {
    echo "Usage:"
    echo "  todo"
    echo "  todo [-h|--help]"
    echo "  todo COMMAND"
    echo
    echo "Commands:"
    echo "  add         Add a new todo item"
    echo "  done        Mark an item completed"
    echo "  undo        Oops, something's not done yet"
    echo "  delete      Delete an item"
    echo "  clean       Kill the todo list"
    echo
    echo "Warning: Using alphabetic characters, numerical digits and common"
    echo "punctuation marks in the todo items is safer. Signs like '#', '['"
    echo "added to new todo items may cause some printing flaws, or even fatal"
    echo "errors."
}

function show_todo () {
    echo -e -n "${LBLUE}TODO${NC} / "
    stat -c %y todo
    unfinished=$(tail -n $todos_count todo | grep -c "\[ \]")
    echo -e "Unfinished items: [${RED}$unfinished${NC}]"
    echo
    plain=$(tail -n $todos_count todo | sed 's/# //')
    pretty=$(echo "$plain" | sed "s=\[x\]=\[${GREEN_E}x${NC_E}\]=")
    echo -e "$pretty"
}

function delete_todo () {
    for i in `seq $1`; do
        sed -i '$d' todo
    done
}

case "$#" in
    "0")
        if [[ $loc = $initloc ]]; then
            echo "todo: Nothing to do"
        else
            show_todo
        fi
        ;;
    "1")
        case "$1" in
            "-h" | "--help")
                show_header
                show_usage
                ;;
            "add")
                echo -n "new item: "
                read new_item
                echo -e "[${GREEN}todo${NC}] New item added! Off we go!"
                echo
                ((todos_count++))
                echo "# [ ] $new_item" >> todo
                show_todo
                ;;
            "done")
                show_todo
                echo
                echo -n "finish which [base 1]: "
                read item_no
                if [[ $((item_no)) != $item_no ]]; then
                    echo "todo: Non-number characters are invalid"
                    exit 1
                else
                    lines_to_delete=$(($todos_count - item_no + 1))
                    if [ $((lines_to_delete)) -le $todos_count ] \
                        && [ $((lines_to_delete)) -ge 1 ]; then
                        buffer=$(tail -n $lines_to_delete todo)
                        delete_todo $lines_to_delete
                        echo "$buffer" | sed "1s/\[ \]/[x]/" >> todo
                        echo -e "[${GREEN}done${NC}] Nailed it!"
                        echo
                        show_todo
                    else
                        echo "todo: Invalid item number"
                        exit 1
                    fi
                fi
                ;;
            "undo")
                echo undo
                ;;
            "delete")
                echo delete
                ;;
            "clean")
                delete_todo $todos_count
                ;;
            *)
                echo "todo: Invalid command: $1"
                echo
                show_usage
                exit 1
                ;;
        esac
        ;;
    *)
        show_header
        show_usage
        exit 1
        ;;
esac
